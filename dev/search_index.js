var documenterSearchIndex = {"docs":
[{"location":"api/#API-(Exported-Functions)","page":"API","title":"API (Exported Functions)","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [RadioTransients]\nOrder = [:function,:type]\nPrivate = false","category":"page"},{"location":"api/#RadioTransients.dedisperse-Tuple{Filterbank, Any}","page":"API","title":"RadioTransients.dedisperse","text":"dedisperse(dyn_spec, DM)\n\nCreates a de-dispersed dynamic spectrum for dispersion measure DM in pc/cc given that the source filterbank dynamicspectrum `dynspechas samples with time stept_step` in seconds.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadioTransients.estimate_dm-Tuple{Any}","page":"API","title":"RadioTransients.estimate_dm","text":"estimatedm(dynspec)\n\nEstimates the dispersion measure for filterbank dynamicspectrum `dynspec` by maximizing the standard deviation of the folded spectrum.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadioTransients.Δt-Tuple{Any, Any, Any}","page":"API","title":"RadioTransients.Δt","text":"Δt(DM, ν₁, ν₂)\n\nCalculates the time delay corresponding to a dispersed pulse at dispersion measure DM in pc/cc between frequencies ν₁ and ν₂\n\n\n\n\n\n","category":"method"},{"location":"api/#RadioTransients.Filterbank","page":"API","title":"RadioTransients.Filterbank","text":"Filterbank(data,headers)\n\nThe datastructure that holds the the Filterbank file.\n\nFields\n\ndata: The data as a DimArray with dimensions Samp and Freq\nheaders: The dictionary of header information\n\n\n\n\n\n","category":"type"},{"location":"api/#RadioTransients.Filterbank-Tuple{String}","page":"API","title":"RadioTransients.Filterbank","text":"Filterbank(\"file.fil\")\n\nRead a SIGPROC .fil file into a Filterbank.\n\nArguments\n\nfilename::String:  The name of the file\n\nOptional Arguments\n\nstart::Int: The starting time sample to read from (inclusive)\nstop::Int: The stopping time sample to read to (inclusive)\nheader_int::DataType: The type of header integers, defaults to UInt32\nheader_float::DataType: The type of header flots, defaults to Float64\n\n\n\n\n\n","category":"method"},{"location":"api/#RadioTransients.Freq","page":"API","title":"RadioTransients.Freq","text":"The frequency dimension of Filterbank data in MHz\n\n\n\n\n\n","category":"type"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using RadioTransients, IntervalSets, DimensionalData","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First, let's grab some filterbank data, we can find one from Berkeley's SETI Research Center. Julia's download function will grab the file from a URL and give us the filename back.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"filename = download(\"https://github.com/UCBerkeleySETI/breakthrough/blob/master/GBT/filterbank_tutorial/blc04_guppi_57563_69862_HIP35136_0011.gpuspec.0002.fil?raw=true\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now, we can read it into a Filterbank. By default, it will read all the time samples, we can however supply start and stop arguments if we want to look at a limited chunk. This is usefull as these files can get quite large.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"fb = Filterbank(filename)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The data is stored as a DimArray from the DimensionalData package in the data attribute. This provides zero-cost abstractions for named indexing and fast index lookups. Our filterbank data has axes Freq and Ti, which we can use for indexing.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"fb.data","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Additionally, DimArrays have plot recipies that make visualization super easy. We can call Plots.jl's heatmap function to get a waterfall.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\nfb.data |> heatmap","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can use this indexing to perform all sorts of analysis. Here we are using .. from IntervalSets.jl to create the range object.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"fb.data[Freq = 1350..1450] |> heatmap","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also index by time to get the nth integration","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"fb.data[Ti = 99] |> plot","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also combine this indexing with Julia's builtin array operations such as looking at the time-averaged slice of spectrum. In this window, we get a nice look at the 21-centimeter line","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Statistics\ndropdims(mean(fb.data,dims=Ti)[Freq = 1419..1422],dims=Ti) |> plot","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = RadioTransients","category":"page"},{"location":"#RadioTransients","page":"Home","title":"RadioTransients","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RadioTransients.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"examples.md\",\"api.md\"]\nDepth = 3","category":"page"}]
}
